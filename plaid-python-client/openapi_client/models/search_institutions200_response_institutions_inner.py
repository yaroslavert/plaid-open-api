# coding: utf-8

"""
    Plaid API

    API for accessing financial institution data via Plaid.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.search_institutions200_response_institutions_inner_status import SearchInstitutions200ResponseInstitutionsInnerStatus
from typing import Optional, Set
from typing_extensions import Self

class SearchInstitutions200ResponseInstitutionsInner(BaseModel):
    """
    SearchInstitutions200ResponseInstitutionsInner
    """ # noqa: E501
    institution_id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    country_codes: Optional[List[StrictStr]] = None
    products: Optional[List[StrictStr]] = None
    routing_numbers: Optional[List[StrictStr]] = None
    dtc_numbers: Optional[List[StrictStr]] = None
    oauth: Optional[StrictBool] = None
    status: Optional[SearchInstitutions200ResponseInstitutionsInnerStatus] = None
    __properties: ClassVar[List[str]] = ["institution_id", "name", "country_codes", "products", "routing_numbers", "dtc_numbers", "oauth", "status"]

    @field_validator('products')
    def products_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['assets', 'auth', 'balance', 'transactions', 'identity', 'investments']):
                raise ValueError("each list item must be one of ('assets', 'auth', 'balance', 'transactions', 'identity', 'investments')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchInstitutions200ResponseInstitutionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchInstitutions200ResponseInstitutionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "institution_id": obj.get("institution_id"),
            "name": obj.get("name"),
            "country_codes": obj.get("country_codes"),
            "products": obj.get("products"),
            "routing_numbers": obj.get("routing_numbers"),
            "dtc_numbers": obj.get("dtc_numbers"),
            "oauth": obj.get("oauth"),
            "status": SearchInstitutions200ResponseInstitutionsInnerStatus.from_dict(obj["status"]) if obj.get("status") is not None else None
        })
        return _obj


